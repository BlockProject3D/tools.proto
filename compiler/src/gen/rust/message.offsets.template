#fragment push decl
#[derive(Copy, Clone, Debug, Default)]
pub struct {msg_name}Offsets {{
{fields}
#fragment push msg_optional
    pub {name}_offsets: Option<{type_name}Offsets>,
#fragment pop
#fragment push msg
    pub {name}_offsets: {type_name}Offsets,
#fragment pop
#fragment push field
    pub {name}: bp3d_proto::message::FieldOffset,
#fragment pop
}}
#fragment pop

#fragment push impl
impl<'a> bp3d_proto::message::FromSliceWithOffsets<'a> for {msg_name}{generics} {{
    type Offsets = {msg_name}Offsets;

    fn from_slice_with_offsets(slice: &'a [u8]) -> bp3d_proto::message::Result<bp3d_proto::message::Message<(Self, Self::Offsets)>> {{
        use bp3d_proto::message::FromSlice;
        let mut offsets = Self::Offsets::default();
        let mut byte_offset: usize = 0;
{fields}
#fragment push field
        let {name}_msg = {type}::from_slice(&slice[byte_offset..])?;
        offsets.{name}.start = byte_offset;
        byte_offset += {name}_msg.size();
        offsets.{name}.end = byte_offset;
        let {name} = {name}_msg.into_inner();
#fragment pop
#fragment push field_msg
        let {name}_msg = {type}::from_slice_with_offsets(&slice[byte_offset..])?;
        offsets.{name}.start = byte_offset;
        byte_offset += {name}_msg.size();
        offsets.{name}.end = byte_offset;
        let ({name}, {name}_offsets) = {name}_msg.into_inner();
        offsets.{name}_offsets = {name}_offsets;
#fragment pop
#fragment push field_union
        let {name}_msg = {type}::from_slice(&slice[byte_offset..], &{on_name})?;
        offsets.{name}.start = byte_offset;
        byte_offset += {name}_msg.size();
        offsets.{name}.end = byte_offset;
        let {name} = {name}_msg.into_inner();
#fragment pop
        let data = {msg_name} {{
{field_names}
#fragment push field_name
            {name},
#fragment pop
        }};
        Ok(bp3d_proto::message::Message::new(byte_offset, (data, offsets)))
    }}
}}
#fragment pop

#fragment push varchar:inline
bp3d_proto::message::util::VarcharString::<{codec}>
#fragment pop

#fragment push array:inline
bp3d_proto::message::util::Array::<&'a [u8], {codec}, {type_name}<&'a [u8]>>
#fragment pop

#fragment push list:inline
bp3d_proto::message::util::List::<&'a [u8], {codec}, {type_name}>
#fragment pop

#fragment push unsized:inline
bp3d_proto::message::util::list::Unsized::<{codec}, {type_name}>
#fragment pop
