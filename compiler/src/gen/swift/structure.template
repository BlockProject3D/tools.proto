#fragment push new
#fragment pop

#fragment push decl
public struct {proto_name:to_pascal_case}{name}<T>: BP3DProto.FixedSize, FromBuffer {{
    public typealias Buffer = T

    var data: T

    public static var size: Int {{ {byte_size} }}

    public init(_ data: T) {{
        self.data = data;
    }}
}}

extension {proto_name:to_pascal_case}{name}<BP3DProto.DataBuffer> {{
    public init() {{
        self.data = BP3DProto.DataBuffer(size: {byte_size})
    }}
}}

public let SIZE_{proto_name:to_screaming_case}_{name:to_screaming_case}: Int = {byte_size};
#fragment pop

#fragment push fixed_size
#fragment pop

#fragment push write_to
extension {proto_name:to_pascal_case}{name}: BP3DProto.WriteTo where T: BP3DProto.Buffer {{
    public typealias Input = {proto_name:to_pascal_case}{name};

    public static func write<B: BP3DProto.WritableBuffer>(input: Input, to out: inout B) throws {{
        out.write(bytes: input.data[...{byte_size}].toData());
    }}
}}
#fragment pop

#fragment push from_bytes
extension {proto_name:to_pascal_case}{name}: BP3DProto.FromSlice where T: BP3DProto.Buffer {{
    public typealias Buffer = T;
    public typealias Output = {proto_name:to_pascal_case}{name};

    public static func from(slice: T) throws -> BP3DProto.Message<Output> {{
        if slice.size < {byte_size} {{
            throw BP3DProto.Error.truncated;
        }}
        return BP3DProto.Message(size: {byte_size}, data: {proto_name:to_pascal_case}{name}(slice[...{byte_size}]));
    }}
}}
#fragment pop
