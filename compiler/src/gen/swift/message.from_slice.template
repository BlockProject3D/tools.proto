#fragment push impl
extension {proto_name:to_pascal_case}{msg_name}: BP3DProto.FromSlice  {{
    public typealias Buffer = B;
    public typealias Output = Self;

    public static func from(slice: B) throws -> BP3DProto.Message<Self> {{
        var byteOffset = 0;
{fields}
#fragment push field
        let {name}Msg = try {type}.from(slice: slice[byteOffset...]);
        byteOffset += {name}Msg.size;
        let {name} = {name}Msg.data;
#fragment pop
#fragment push field_msg
        let {name}Msg = try {type}.from(slice: slice[byteOffset...]);
        byteOffset += {name}Msg.size;
        let {name} = {name}Msg.data;
#fragment pop
#fragment push field_union
        let {name}Msg = try {type}.from(slice: slice[byteOffset...], discriminant: {on_name});
        byteOffset += {name}Msg.size;
        let {name} = {name}Msg.data;
#fragment pop
        let _data = {proto_name:to_pascal_case}{msg_name}(
{field_names:remove_leading_coma}
#fragment push field_name
            {name}: {name},
#fragment pop
        );
        return BP3DProto.Message(size: byteOffset, data: _data);
    }}
}}
#fragment pop

#fragment push varchar:inline
BP3DProto.VarcharString<B, {codec}>
#fragment pop

#fragment push array:inline
BP3DProto.Array<B, {codec}, {type_name}<B>>
#fragment pop

#fragment push list:inline
BP3DProto.List<B, {codec}, {type_name}<B>>
#fragment pop

#fragment push unsized:inline
BP3DProto.UnsizedList<B, {codec}, {type_name}<B>>
#fragment pop
